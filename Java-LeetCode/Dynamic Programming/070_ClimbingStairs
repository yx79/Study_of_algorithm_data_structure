/*
70. Climbing Stairs
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.
*/

public class Solution {
    public int climbStairs1(int n) {
        // O(n) space
        if (n == 1 || n == 2 || n == 0) {
            return n;
        } 
        int[] f = new int[n + 1];
        f[1] = 1;
        f[2] = 2;
        for (int i = 3; i <= n; i++) {
            // either climbe 1 or 2 steps
            f[i] = f[i - 1] + f[i - 2];
        } 
        return f[n];
        
    }
    
    public int climbStairs(int n) {
        // O(1) space
        if (n == 1 || n == 2 || n == 0) {
            return n;
        } 
        int pre = 1, cur = 2;
         for (int i = 3; i <= n; i++) {
            // either climbe 1 or 2 steps
            int temp = cur;
            cur = pre + cur;
            pre = temp;
        } 
        return cur;
        
    }
}
